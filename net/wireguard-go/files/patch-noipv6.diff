From 8203a79a2fb907d0443cbc739d13e7d9e36f4538 Mon Sep 17 00:00:00 2001
From: "Jason A. Donenfeld" <Jason@zx2c4.com>
Date: Mon, 11 Jun 2018 19:04:38 +0200
Subject: Support IPv6-less kernels

---
 conn_default.go | 10 ++++++++--
 conn_linux.go   | 16 ++++++++++++----
 2 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/conn_default.go b/conn_default.go
index 14ed56c..ff5cc48 100644
--- conn_default.go
+++ conn_default.go
@@ -94,12 +94,12 @@ func CreateBind(uport uint16, device *Device) (Bind, uint16, error) {
 	port := int(uport)
 
 	bind.ipv4, port, err = listenNet("udp4", port)
-	if err != nil {
+	if err != nil && err != EAFNOSUPPORT {
 		return nil, 0, err
 	}
 
 	bind.ipv6, port, err = listenNet("udp6", port)
-	if err != nil {
+	if err != nil && err != EAFNOSUPPORT {
 		bind.ipv4.Close()
 		return nil, 0, err
 	}
@@ -117,6 +117,9 @@ func (bind *NativeBind) Close() error {
 }
 
 func (bind *NativeBind) ReceiveIPv4(buff []byte) (int, Endpoint, error) {
+	if bind.ipv4 == nil {
+		return 0, nil, errors.New("No IPv4 support")
+	}
 	n, endpoint, err := bind.ipv4.ReadFromUDP(buff)
 	if endpoint != nil {
 		endpoint.IP = endpoint.IP.To4()
@@ -125,6 +128,9 @@ func (bind *NativeBind) ReceiveIPv4(buff []byte) (int, Endpoint, error) {
 }
 
 func (bind *NativeBind) ReceiveIPv6(buff []byte) (int, Endpoint, error) {
+	if bind.ipv6 == nil {
+		return 0, nil, errors.New("No IPv6 support")
+	}
 	n, endpoint, err := bind.ipv6.ReadFromUDP(buff)
 	return n, (*NativeEndpoint)(endpoint), err
 }
diff --git a/conn_linux.go b/conn_linux.go
index 0227f04..2940584 100644
--- conn_linux.go
+++ conn_linux.go
@@ -24,6 +24,7 @@ import (
 	"net"
 	"strconv"
 	"sync"
+	"syscall"
 	"unsafe"
 )
 
@@ -140,17 +141,18 @@ func CreateBind(port uint16, device *Device) (*NativeBind, uint16, error) {
 	go bind.routineRouteListener(device)
 
 	bind.sock6, port, err = create6(port)
-	if err != nil {
+	if err != nil && err != syscall.EAFNOSUPPORT {
 		bind.netlinkCancel.Cancel()
-		return nil, port, err
+		return nil, 0, err
 	}
 
 	bind.sock4, port, err = create4(port)
-	if err != nil {
+	if err != nil && err != syscall.EAFNOSUPPORT {
 		bind.netlinkCancel.Cancel()
 		unix.Close(bind.sock6)
+		return nil, 0, err
 	}
-	return &bind, port, err
+	return &bind, port, nil
 }
 
 func (bind *NativeBind) SetMark(value uint32) error {
@@ -202,6 +204,9 @@ func (bind *NativeBind) Close() error {
 
 func (bind *NativeBind) ReceiveIPv6(buff []byte) (int, Endpoint, error) {
 	var end NativeEndpoint
+	if bind.sock6 == -1 {
+		return 0, nil, errors.New("No IPv6 support")
+	}
 	n, err := receive6(
 		bind.sock6,
 		buff,
@@ -212,6 +217,9 @@ func (bind *NativeBind) ReceiveIPv6(buff []byte) (int, Endpoint, error) {
 
 func (bind *NativeBind) ReceiveIPv4(buff []byte) (int, Endpoint, error) {
 	var end NativeEndpoint
+	if bind.sock4 == -1 {
+		return 0, nil, errors.New("No IPv4 support")
+	}
 	n, err := receive4(
 		bind.sock4,
 		buff,
-- 
cgit v1.1-37-gf5b9

